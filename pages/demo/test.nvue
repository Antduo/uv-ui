<template>
	<view class="waterfall">
		<!-- #ifndef APP-NVUE -->
		<uv-waterfall ref="waterfall"
			v-model="list"
			:add-time="50"
			column-count="2"
			left-gap="10"
			right-gap="10"
			column-gap="8"
			column-width="40"
			@finish="handleWaterFallFinish"
			@clear="clearCallback"
			@remove="remove"
			@changeList="changeList">
			<!-- 第一列数据 -->
			<template v-slot:list1>
				<!-- 为了磨平部分平台的BUG，必须套一层view -->
				<view>
					<view v-for="(item, index) in list1"
						:key="item.id"
						class="waterfall-item"
						@longpress="longHandle(item)">
						<view class="waterfall-item__image">
							<uv-image :src="item.image" mode="widthFix" :width="item.width+'px'">
								<template v-slot:loading>
									<uv-loading-icon></uv-loading-icon>
								</template>
							</uv-image>
						</view>
						<view class="waterfall-item__ft">
							<view class="waterfall-item__ft__title">
								<text class="value">{{item.title}}</text>
							</view>
							<view class="waterfall-item__ft__desc uv-line-2">
								<text class="value">{{item.desc}}</text>
							</view>
							<view class="waterfall-item__ft__btn"
								v-if="item.allowEdit">
								<uv-button type="primary"
									size="mini"
									text="异步修改"
									@click="edit(item)"></uv-button>
							</view>
						</view>
					</view>
				</view>
			</template>
			<!-- 第二列数据 -->
			<template v-slot:list2>
				<!-- 为了磨平部分平台的BUG，必须套一层view -->
				<view>
					<view v-for="(item, index) in list2"
						:key="item.id"
						class="waterfall-item"
						@longpress="longHandle(item)">
						<view class="waterfall-item__image">
							<uv-image :src="item.image" mode="widthFix" :width="item.width+'px'">
								<template v-slot:loading>
									<uv-loading-icon></uv-loading-icon>
								</template>
							</uv-image>
						</view>
						<view class="waterfall-item__ft">
							<view class="waterfall-item__ft__title">
								<text class="value">{{item.title}}</text>
							</view>
							<view class="waterfall-item__ft__desc uv-line-2">
								<text class="value">{{item.desc}}</text>
							</view>
						</view>
					</view>
				</view>
			</template>
		</uv-waterfall>
		<uv-load-more :status="loadStatus"></uv-load-more>
		<!-- #endif -->
	</view>
</template>
<script>
	import { guid } from '@/uni_modules/uv-ui-tools/libs/function/index.js'
	import mixin from '@/uni_modules/uv-ui-tools/libs/mixin/mixin.js'
	const imgs = [
		'https://cdn.uviewui.com/uview/album/1.jpg',
		'https://cdn.uviewui.com/uview/album/2.jpg',
		'https://cdn.uviewui.com/uview/album/3.jpg',
		'https://cdn.uviewui.com/uview/album/4.jpg',
		'https://cdn.uviewui.com/uview/album/5.jpg',
		'https://cdn.uviewui.com/uview/album/6.jpg',
		'https://cdn.uviewui.com/uview/album/7.jpg',
		'https://cdn.uviewui.com/uview/album/8.jpg',
		'https://cdn.uviewui.com/uview/album/9.jpg',
		'https://cdn.uviewui.com/uview/album/10.jpg',
	]
	export default {
		mixins: [mixin],
		data() {
			return {
				list: [],// 瀑布流全部数据
				list1: [],// 瀑布流第一列数据
				list2: [],// 瀑布流第二列数据
				loadStatus: 'loadmore',
				pageHide: false
			}
		},
		onLoad() {
			this.getRandomData();
		},
		onShow() {
			this.pageHide = false;
		},
		onHide() {
			this.pageHide = true;
		},
		// 下拉刷新数据
		onPullDownRefresh() {
			this.list = [];
			// #ifndef APP-NVUE
			this.clear();
			// 清空列数据
			this.list1 = [];
			this.list2 = [];
			// #endif
			uni.showToast({
				icon: 'success',
				title: '刷新成功'
			})
			uni.stopPullDownRefresh();
		},
		// 触底加载更多
		onReachBottom() {
			if(this.loadStatus == 'loadmore')
				this.getRandomData();
		},
		methods: {
			// 离开当前页面时，就不处理还未处理的数据
			// e.name在这里返回是list1或list2，要手动将数据追加到相应列
			changeList(e){
				if(!this.pageHide) 
					this[e.name].push(e.value);
			},
			// 长按某项执行删除操作
			longHandle(item) {
				let that = this;
				uni.showModal({
					title: '提示',
					content: '你确定删除该项？',
					success(res) {
						if (res.confirm) {
							that.$refs.waterfall.remove(item.id);
						}
					}
				})
			},
			// 删除某项后返回对应id，根据id标识在列数据中手动删除该项数据
			remove(id){
				this.list1.forEach((item,index)=>{
					if(item.id == id){
						this.list1.splice(index,1);
					}
				})
				this.list2.forEach((item,index)=>{
					if(item.id == id){
						this.list2.splice(index,1);
					}
				})
			},
			// 清空数据
			clear(){
				this.$refs.waterfall.clear();
			},
			// 清空数据返回
			clearCallback(){
				for (let i = 0; i < 10; i++) {
					this.list.push(this.getItem(i));
				}
			},
			// 修改某项数据
			edit(item) {
				uni.showLoading({
					title: '修改中'
				})
				setTimeout(() => {
					item.title = 'uv-ui1.0';
					item.desc = '修改后的文本';
					uni.hideLoading();
				}, 1000)
			},
			// 获取随机数据
			getRandomData() {
				this.loadStatus = 'loading';
				// 模拟异步
				setTimeout(() => {
					for (let i = 0; i < 10; i++) {
						this.list.push(this.getItem(i));
					}
				}, 200)
			},
			// 瀑布流加载完毕事件
			handleWaterFallFinish() {
				this.loadStatus = 'loadmore'
			},
			getImage() {
				const index = Math.floor(Math.random() * 10);
				return imgs[index];
			},
			getItem(i){
				return {
					id: guid(),
					allowEdit: i==0,
					image: this.getImage(),
					title: i % 2 == 0 ? `(${this.list.length + 1})体验uv-ui框架`: `(${this.list.length + 1})uv-ui支持多平台`,
					desc: i % 2 == 0 ? `(${this.list.length + 1})欢迎使用uv-ui，uni-app生态专用的UI框架` : `(${this.list.length + 1})开发者编写一套代码， 可发布到iOS、Android、H5、以及各种小程序`
				}
			}
		}
	}
</script>
<style>
	/* #ifndef APP-NVUE */
	page {
		background: #f1f1f1;
	}
	/* #endif */
</style>
<style scoped lang="scss">
	$show-lines: 1;
	@import '@/uni_modules/uv-ui-tools/libs/css/variable.scss';
	.waterfall {
		background: #f1f1f1;
	}
	/* #ifndef APP-NVUE */
	.waterfall-item {
		overflow: hidden;
		margin-top: 10px;
		border-radius: 6px;
	}
	/* #endif */
	.waterfall-item__ft {
		padding: 20rpx;
		background: #fff;
		&__title {
			margin-bottom: 10rpx;
			line-height: 48rpx;
			font-weight: 700;
			.value {
				font-size: 32rpx;
				color: #303133;
			}
		}
		&__desc .value {
			font-size: 28rpx;
			color: #606266;
		}
		&__btn {
			padding: 10px 0;
		}
	}
</style>